// Generated by CoffeeScript 1.8.0
(function() {
  this.Turbulence = (function() {
    Turbulence.preload = function(game) {
      return game.load.image("turbulence", "sprites/wind.png");
    };

    function Turbulence(game, player) {
      this.game = game;
      this.player = player;
      this.positive = true;
      this.last_overlapped = 0;
    }

    Turbulence.prototype.setup = function() {
      this.group = this.game.add.group();
      return this.group.enableBody = true;
    };

    Turbulence.prototype.create_turbulence = function(x, y) {
      var wind;
      wind = this.group.create(x, y, "turbulence");
      return wind.body.velocity.x = -75;
    };

    Turbulence.prototype.update = function() {
      this.game.physics.arcade.overlap(this.player.body, this.group, (function(_this) {
        return function() {
          _this.shake();
          return _this.last_overlapped = _this.game.time.now + 100;
        };
      })(this));
      if (this.game.time.now > this.last_overlapped) {
        return this.stop_shake();
      }
    };

    Turbulence.prototype.shake = function() {
      var shake_velocity;
      shake_velocity = 10;
      if (this.positive) {
        if (this.game.camera.y === 20) {
          return this.positive = false;
        } else {
          return this.game.camera.y += shake_velocity;
        }
      } else {
        if (this.game.camera.y === 0) {
          return this.positive = true;
        } else {
          return this.game.camera.y -= shake_velocity;
        }
      }
    };

    Turbulence.prototype.stop_shake = function() {
      return this.game.camera.y = 0;
    };

    Turbulence.prototype.create_level = function(num_turbulence, x_start, x_end, y_start, y_end) {
      var i, x, y, _i, _results;
      _results = [];
      for (i = _i = 1; 1 <= num_turbulence ? _i <= num_turbulence : _i >= num_turbulence; i = 1 <= num_turbulence ? ++_i : --_i) {
        x = Math.random() * (x_end - x_start) + x_start;
        y = Math.random() * (y_end - y_start) + y_start;
        _results.push(this.create_turbulence(x, y));
      }
      return _results;
    };

    return Turbulence;

  })();

}).call(this);
